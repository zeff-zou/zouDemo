<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!--上面的xsd最好和当前使用的Spring版本号一致,如果换了Spring版本,这个最好也跟着改-->


    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.zou.**.controller"/>

    <!-- 配置注解驱动 -->
    <!-- 解决@ResponseBody注解直接返回对象并转换成JSON时出现406问题 -->
    <!--<mvc:annotation-driven />-->
    <!--<mvc:annotation-driven>-->
        <!--<mvc:argument-resolvers>-->
            <!--<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />-->
        <!--</mvc:argument-resolvers>-->
    <!--</mvc:annotation-driven>-->

    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
            </bean>
        </mvc:message-converters>
        <mvc:argument-resolvers>
            <!--分页的一个实现 ？-->
            <bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
            <!--暂时没有 shiro 控制-->
            <!--
                        <bean class="com.imall.iportal.shiro.bind.method.CurrUserMethodArgumentResolver"/>
                        <bean class="com.imall.iportal.shiro.bind.method.CurrUserOrgJobMethodArgumentResolver"/>
            -->
        </mvc:argument-resolvers>
    </mvc:annotation-driven>
    <!--静态资源映射-->
    <!--
    http://perfy315.iteye.com/blog/2008763
    mapping="/js/**"
    表示当浏览器有静态资源请求的时候，并且请求url路径中带有：/js/，则这个资源跑到webapp目录下的/WEB-INF/statics/js/去找
    比如我们在 JSP 中引入一个 js 文件：src="${webRoot}/js/jQuery-core/jquery-1.6.1.min.js
    -->
    <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>
    <mvc:resources mapping="/images/**" location="/WEB-INF/statics/images/"/>
    <mvc:resources mapping="/commons/**" location="/WEB-INF/statics/commons/"/>


    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/view/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--&lt;!&ndash; 文件上传 start 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 &ndash;&gt;-->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--&lt;!&ndash; 默认编码 &ndash;&gt;-->
        <!--<property name="defaultEncoding" value="UTF-8"/>-->
        <!--&lt;!&ndash; 文件大小最大值 上传文件大小限制为10M，10*1024*1024 &ndash;&gt;-->
        <!--<property name="maxUploadSize" value="10485760"/>-->
        <!--&lt;!&ndash; 内存中的最大值 &ndash;&gt;-->
        <!--<property name="maxInMemorySize" value="4096"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;文件上传 end&ndash;&gt;-->
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager"
          class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!--默认的content type -->
        <property name="defaultContentType" value="text/html"/>
    </bean>
</beans>